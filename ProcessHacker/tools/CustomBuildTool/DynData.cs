/*
 * Copyright (c) 2022 Winsider Seminars & Solutions, Inc.  All rights reserved.
 *
 * This file is part of System Informer.
 *
 * Authors:
 *
 *     jxy-s
 *
 */

namespace CustomBuildTool
{
    public static class DynData
    {
        private const string FileHeader =
@"/*
 * Copyright (c) 2022 Winsider Seminars & Solutions, Inc.  All rights reserved.
 *
 * This file is part of System Informer.
 *
 * THIS IS AN AUTOGENERATED FILE, DO NOT MODIFY
 *
 */";

        private const string Includes =
@"#include <kphlibbase.h>";

        private const UInt32 Version = 12;

        private static readonly byte[] SessionTokenPublicKey = new byte[]
        {
            0x45, 0x43, 0x53, 0x31, 0x20, 0x00, 0x00, 0x00,
            0x04, 0x4d, 0x12, 0x40, 0x1c, 0xa4, 0x1b, 0xfd,
            0x71, 0xbd, 0x0b, 0x4a, 0x6b, 0x4d, 0xe3, 0xc9,
            0xac, 0xde, 0x26, 0x73, 0x84, 0xe7, 0xb9, 0xf8,
            0x19, 0xd5, 0xd9, 0xb8, 0x7d, 0x7b, 0x7d, 0x0e,
            0x24, 0x4d, 0x69, 0xc6, 0x89, 0xf4, 0x64, 0x4c,
            0xa2, 0x9d, 0x29, 0xb3, 0x5c, 0x9b, 0x4e, 0xf5,
            0x35, 0xaa, 0x87, 0xd3, 0xf1, 0xbb, 0x0a, 0xcd,
            0x0c, 0x6c, 0x55, 0x56, 0x71, 0x8f, 0x79, 0x27,
        };

        private static string DynConfigC =
$@"#define KPH_DYN_CONFIGURATION_VERSION { Version }

#define KPH_DYN_CI_INVALID ((SHORT)-1)
#define KPH_DYN_CI_V1      ((SHORT)1)
#define KPH_DYN_CI_V2      ((SHORT)2)

#define KPH_DYN_LX_INVALID ((SHORT)-1)
#define KPH_DYN_LX_V1      ((SHORT)1)

#define KPH_DYN_SESSION_TOKEN_PUBLIC_KEY_LENGTH { SessionTokenPublicKey.Length }

#include <pshpack1.h>

typedef struct _KPH_DYN_CONFIGURATION
{{
    USHORT MajorVersion;
    USHORT MinorVersion;
    USHORT BuildNumberMin;               // -1 to ignore
    USHORT RevisionMin;                  // -1 to ignore
    USHORT BuildNumberMax;               // -1 to ignore
    USHORT RevisionMax;                  // -1 to ignore

    USHORT EgeGuid;                      // dt nt!_ETW_GUID_ENTRY Guid
    USHORT EpObjectTable;                // dt nt!_EPROCESS ObjectTable
    USHORT EreGuidEntry;                 // dt nt!_ETW_REG_ENTRY GuidEntry
    USHORT HtHandleContentionEvent;      // dt nt!_HANDLE_TABLE HandleContentionEvent
    USHORT OtName;                       // dt nt!_OBJECT_TYPE Name
    USHORT OtIndex;                      // dt nt!_OBJECT_TYPE Index
    USHORT ObDecodeShift;                // dt nt!_HANDLE_TABLE_ENTRY ObjectPointerBits
    USHORT ObAttributesShift;            // dt nt!_HANDLE_TABLE_ENTRY Attributes
    USHORT CiVersion;                    // ci.dll exports version
    USHORT AlpcCommunicationInfo;        // dt nt!_ALPC_PORT CommunicationInfo
    USHORT AlpcOwnerProcess;             // dt nt!_ALPC_PORT OwnerProcess
    USHORT AlpcConnectionPort;           // dt nt!_ALPC_COMMUNICATION_INFO ConnectionPort
    USHORT AlpcServerCommunicationPort;  // dt nt!_ALPC_COMMUNICATION_INFO ServerCommunicationPort
    USHORT AlpcClientCommunicationPort;  // dt nt!_ALPC_COMMUNICATION_INFO ClientCommunicationPort
    USHORT AlpcHandleTable;              // dt nt!_ALPC_COMMUNICATION_INFO HandleTable
    USHORT AlpcHandleTableLock;          // dt nt!_ALPC_HANDLE_TABLE Lock
    USHORT AlpcAttributes;               // dt nt!_ALPC_PORT PortAttributes
    USHORT AlpcAttributesFlags;          // dt nt!_ALPC_PORT_ATTRIBUTES Flags
    USHORT AlpcPortContext;              // dt nt!_ALPC_PORT PortContext
    USHORT AlpcPortObjectLock;           // dt nt!_ALPC_PORT PortObjectLock
    USHORT AlpcSequenceNo;               // dt nt!_ALPC_PORT SequenceNo
    USHORT AlpcState;                    // dt nt!_ALPC_PORT u1.State
    USHORT KtReadOperationCount;         // dt nt!_KTHREAD ReadOperationCount
    USHORT KtWriteOperationCount;        // dt nt!_KTHREAD WriteOperationCount
    USHORT KtOtherOperationCount;        // dt nt!_KTHREAD OtherOperationCount
    USHORT KtReadTransferCount;          // dt nt!_KTHREAD ReadTransferCount
    USHORT KtWriteTransferCount;         // dt nt!_KTHREAD WriteTransferCount
    USHORT KtOtherTransferCount;         // dt nt!_KTHREAD OtherTransferCount
    USHORT LxVersion;                    // lxcore.sys exports version
    USHORT LxPicoProc;                   // uf lxcore!LxpSyscall_GETPID
    USHORT LxPicoProcInfo;               // uf lxcore!LxpSyscall_GETPID
    USHORT LxPicoProcInfoPID;            // uf lxcore!LxpSyscall_GETPID
    USHORT LxPicoThrdInfo;               // uf lxcore!LxpSyscall_GETTID
    USHORT LxPicoThrdInfoTID;            // uf lxcore!LxpSyscall_GETTID
    USHORT MmSectionControlArea;         // dt nt!_SECTION u1.ControlArea
    USHORT MmControlAreaListHead;        // dt nt!_CONTROL_AREA ListHead
    USHORT MmControlAreaLock;            // dt nt!_CONTROL_AREA ControlAreaLock
    USHORT EpSectionObject;              // dt nt!_EPROCESS SectionObject
}} KPH_DYN_CONFIGURATION, *PKPH_DYN_CONFIGURATION;

typedef struct _KPH_DYNDATA
{{
    ULONG Version;
    BYTE SessionTokenPublicKey[KPH_DYN_SESSION_TOKEN_PUBLIC_KEY_LENGTH];
    ULONG Count;
    KPH_DYN_CONFIGURATION Configs[ANYSIZE_ARRAY];
}} KPH_DYNDATA, *PKPH_DYNDATA;

#include <poppack.h>";

        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public struct DynConfig
        {
            public UInt16 MajorVersion;
            public UInt16 MinorVersion;
            public UInt16 BuildNumberMin;
            public UInt16 RevisionMin;
            public UInt16 BuildNumberMax;
            public UInt16 RevisionMax;

            public UInt16 EgeGuid;
            public UInt16 EpObjectTable;
            public UInt16 EreGuidEntry;
            public UInt16 HtHandleContentionEvent;
            public UInt16 OtName;
            public UInt16 OtIndex;
            public UInt16 ObDecodeShift;
            public UInt16 ObAttributesShift;
            public UInt16 CiVersion;
            public UInt16 AlpcCommunicationInfo;
            public UInt16 AlpcOwnerProcess;
            public UInt16 AlpcConnectionPort;
            public UInt16 AlpcServerCommunicationPort;
            public UInt16 AlpcClientCommunicationPort;
            public UInt16 AlpcHandleTable;
            public UInt16 AlpcHandleTableLock;
            public UInt16 AlpcAttributes;
            public UInt16 AlpcAttributesFlags;
            public UInt16 AlpcPortContext;
            public UInt16 AlpcPortObjectLock;
            public UInt16 AlpcSequenceNo;
            public UInt16 AlpcState;
            public UInt16 KtReadOperationCount;
            public UInt16 KtWriteOperationCount;
            public UInt16 KtOtherOperationCount;
            public UInt16 KtReadTransferCount;
            public UInt16 KtWriteTransferCount;
            public UInt16 KtOtherTransferCount;
            public UInt16 LxVersion;
            public UInt16 LxPicoProc;
            public UInt16 LxPicoProcInfo;
            public UInt16 LxPicoProcInfoPID;
            public UInt16 LxPicoThrdInfo;
            public UInt16 LxPicoThrdInfoTID;
            public UInt16 MmSectionControlArea;
            public UInt16 MmControlAreaListHead;
            public UInt16 MmControlAreaLock;
            public UInt16 EpSectionObject;

            public DynConfig()
            {
                MajorVersion = ushort.MaxValue;
                MinorVersion = ushort.MaxValue;
                BuildNumberMin = ushort.MaxValue;
                BuildNumberMax = ushort.MaxValue;
                RevisionMin = ushort.MaxValue;
                RevisionMax = ushort.MaxValue;

                EgeGuid = ushort.MaxValue;
                EpObjectTable = ushort.MaxValue;
                EreGuidEntry = ushort.MaxValue;
                HtHandleContentionEvent = ushort.MaxValue;
                OtName = ushort.MaxValue;
                OtIndex = ushort.MaxValue;
                ObDecodeShift = ushort.MaxValue;
                ObAttributesShift = ushort.MaxValue;
                CiVersion = ushort.MaxValue;
                AlpcCommunicationInfo = ushort.MaxValue;
                AlpcOwnerProcess = ushort.MaxValue;
                AlpcConnectionPort = ushort.MaxValue;
                AlpcServerCommunicationPort = ushort.MaxValue;
                AlpcClientCommunicationPort = ushort.MaxValue;
                AlpcHandleTable = ushort.MaxValue;
                AlpcHandleTableLock = ushort.MaxValue;
                AlpcAttributes = ushort.MaxValue;
                AlpcAttributesFlags = ushort.MaxValue;
                AlpcPortContext = ushort.MaxValue;
                AlpcPortObjectLock = ushort.MaxValue;
                AlpcSequenceNo = ushort.MaxValue;
                AlpcState = ushort.MaxValue;
                KtReadOperationCount = ushort.MaxValue;
                KtWriteOperationCount = ushort.MaxValue;
                KtOtherOperationCount = ushort.MaxValue;
                KtReadTransferCount = ushort.MaxValue;
                KtWriteTransferCount = ushort.MaxValue;
                KtOtherTransferCount = ushort.MaxValue;
                LxVersion = ushort.MaxValue;
                LxPicoProc = ushort.MaxValue;
                LxPicoProcInfo = ushort.MaxValue;
                LxPicoProcInfoPID = ushort.MaxValue;
                LxPicoThrdInfo = ushort.MaxValue;
                LxPicoThrdInfoTID = ushort.MaxValue;
                MmSectionControlArea = ushort.MaxValue;
                MmControlAreaListHead = ushort.MaxValue;
                MmControlAreaLock = ushort.MaxValue;
                EpSectionObject = ushort.MinValue;
            }
        }

        public static void Execute(string OutDir)
        {
            if (!File.Exists(Verify.GetPath("kph.key")))
                return;

            string manifestFile = "kphlib\\kphdyn.xml";
            string headerFile = "kphlib\\include\\kphdyn.h";
            string sourceFile = "kphlib\\kphdyn.c";

            GenerateConfig(manifestFile, out byte[] config);

            Program.PrintColorMessage($"Dynamic header -> {headerFile}", ConsoleColor.Cyan);

            if (!GenerateHeader(headerFile))
            {
                Program.PrintColorMessage("Dynamic configuration is invalid!", ConsoleColor.Red);
                return;
            }

            Program.PrintColorMessage($"Dynamic source -> {sourceFile}", ConsoleColor.Cyan);

            if (!GenerateSource(manifestFile, sourceFile))
            {
                Program.PrintColorMessage("Dynamic configuration is invalid!", ConsoleColor.Red);
                return;
            }

            if (string.IsNullOrWhiteSpace(OutDir))
                return;

            string configFile = $"{OutDir}\\ksidyn.bin";

            if (File.Exists(configFile))
                File.Delete(configFile);
            Directory.CreateDirectory(OutDir);
            File.WriteAllBytes(configFile, config);
            Program.PrintColorMessage($"Dynamic config -> {configFile}", ConsoleColor.Cyan);
            Verify.CreateSignatureFile(Verify.GetPath("kph.key"), configFile);
        }

        private static bool GenerateHeader(string FileName)
        {
            FileStreamOptions options = new FileStreamOptions
            {
                Mode = FileMode.Create,
                Access = FileAccess.Write,
                Share = FileShare.None,
                PreallocationSize = 0x2000, // 8KB
                //Options = FileOptions.SequentialScan
            };

            using (StreamWriter sw = new StreamWriter(FileName, Utils.UTF8NoBOM, options))
            {
                sw.WriteLine(FileHeader);
                sw.WriteLine();
                sw.WriteLine("#pragma once");
                sw.WriteLine();
                sw.WriteLine(Includes);
                sw.WriteLine();
                sw.WriteLine(DynConfigC);
                sw.WriteLine();
                sw.WriteLine("#ifdef _WIN64");
                sw.WriteLine("extern CONST BYTE KphDynData[];");
                sw.WriteLine("extern CONST ULONG KphDynDataLength;");
                sw.WriteLine("#endif");
            }
#if DEBUG
            var filesize = Win32.GetFileSize(FileName);
            var filesizeondisk = 0x1000 * ((filesize + 0x1000 - 1) / 0x1000); // Assume 4k sector size (dmex)
            Debug.Assert(filesizeondisk == options.PreallocationSize, "Update PreallocationSize");
#endif
            return true;
        }

        //StringBuilder sb = new StringBuilder(8192);
        //    sb.AppendLine(FileHeader);
        //    sb.AppendLine();
        //    sb.AppendLine("#pragma once");
        //    sb.AppendLine();
        //    sb.AppendLine(Includes);
        //    sb.AppendLine();
        //    sb.AppendLine(DynConfigC);
        //    sb.AppendLine();
        //    sb.AppendLine("#ifdef _WIN64");
        //    sb.AppendLine("extern CONST BYTE KphDynData[];");
        //    sb.AppendLine("extern CONST ULONG KphDynDataLength;");
        //    sb.AppendLine("#endif");
        //    return sb.ToString();
        //}

        private static bool GenerateSource(string ManifestFile, string FileName)
        {
            FileStreamOptions options = new FileStreamOptions
            {
                Mode = FileMode.Create,
                Access = FileAccess.Write,
                Share = FileShare.None,
                PreallocationSize = 0x3000, // 12KB
                //Options = FileOptions.SequentialScan
            };

            if (!LoadConfig(ManifestFile, out string Config, out string Sig))
                return false;

            using (StreamWriter sw = new StreamWriter(FileName, Utils.UTF8NoBOM, options))
            {
                sw.WriteLine(FileHeader);
                sw.WriteLine();
                sw.WriteLine(Includes);
                sw.WriteLine();
                sw.WriteLine("#ifdef _WIN64");
                sw.WriteLine("CONST BYTE KphDynData[] =");
                sw.WriteLine("{");
                sw.Write(Config);
                sw.WriteLine("};");
                sw.WriteLine();
                sw.WriteLine("CONST ULONG KphDynDataLength = ARRAYSIZE(KphDynData);");
                sw.WriteLine("#endif");
            }
#if DEBUG
            var filesize = Win32.GetFileSize(FileName);
            var filesizeondisk = 0x1000 * ((filesize + 0x1000 - 1) / 0x1000); // Assume 4k sector size (dmex)
            Debug.Assert(filesizeondisk == options.PreallocationSize, "Update PreallocationSize");
#endif
            return true;

            //StringBuilder sb = new StringBuilder(16348);
            //sb.AppendLine(FileHeader);
            //sb.AppendLine();
            //sb.AppendLine(Includes);
            //sb.AppendLine();
            //sb.AppendLine("#ifdef _WIN64");
            //sb.AppendLine("CONST BYTE KphDynData[] =");
            //sb.AppendLine("{");
            //sb.Append(Config);
            //sb.AppendLine("};");
            //sb.AppendLine();
            //sb.AppendLine("CONST ULONG KphDynDataLength = ARRAYSIZE(KphDynData);");
            //sb.AppendLine("#endif");
            //return sb.ToString();
        }

        /// <summary>
        /// This function generates a config structure for the current platform from XML
        /// </summary>
        /// <param name="ManifestFile">The configuration file.</param>
        /// <param name="ConfigData">The configuration file.</param>
        /// <param name="SigData"></param>
        /// <returns></returns>
        private static bool LoadConfig(
            string ManifestFile,
            out string ConfigData,
            out string SigData
            )
        {
            byte[] configbuffer = null;
            byte[] signedbuffer = null;

            if (!GenerateConfig(ManifestFile, out configbuffer))
            {
                ConfigData = null;
                SigData = null;
                return false;
            }

            signedbuffer = Verify.SignData(Verify.GetPath("kph.key"), configbuffer);

            ConfigData = BufferToString(configbuffer);
            SigData = BufferToString(signedbuffer);
            return true;
        }
           
        private static bool GenerateConfig(
            string ManifestFile,
            out byte[] ConfigBytes
            )
        {
            var xml = new XmlDocument();
            xml.Load(ManifestFile);
            var dyn = xml.SelectSingleNode("/dyn");
            var configs = new List<DynConfig>(10);
            var configNames = new List<string>(10);

            foreach (XmlNode data in dyn.SelectNodes("data"))
            {
                var config = new DynConfig();
                var configName = data.Attributes.GetNamedItem("name").Value;

                //Program.PrintColorMessage(configName, ConsoleColor.Cyan);

                foreach (XmlNode field in data.SelectNodes("field"))
                {
                    var value = field.Attributes.GetNamedItem("value").Value;
                    var name = field.Attributes.GetNamedItem("name").Value;
                    var member = typeof(DynConfig).GetField(name);

                    if (value.StartsWith("0x", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Convert.ToUInt64(value, 16).ToString();
                    }
                    else if (value.Equals("-1", StringComparison.OrdinalIgnoreCase) && member.FieldType == typeof(ushort))
                    {
                        value = ushort.MaxValue.ToString();
                    }

                    member.SetValueDirect(__makeref(config), Convert.ChangeType(value, member.FieldType));
                }

                configs.Add(config);
                configNames.Add(configName);
            }

            if (!Validate(configs, configNames))
            {
                ConfigBytes = null;
                return false;
            }

            using (var stream = new MemoryStream())
            using (var writer = new BinaryWriter(stream))
            {
                //
                // Write the version, session token public key, and count first,
                // then the blocks. This conforms with KPH_DYNDATA defined above.
                //
                writer.Write(Version);
                writer.Write(SessionTokenPublicKey);
                writer.Write((uint)configs.Count);
                writer.Write(MemoryMarshal.AsBytes(CollectionsMarshal.AsSpan(configs)));

                ConfigBytes = stream.ToArray();
            }

            return true;
        }

        private static bool Validate(List<DynConfig> Configs, List<string> ConfigNames)
        {
            bool valid = true;

            for (int i = 0; i < Configs.Count; i++)
            {
                var config = Configs[i];
                var configName = ConfigNames[i];

                if (config.MajorVersion == ushort.MaxValue)
                {
                    Program.PrintColorMessage($"{configName} - MajorVersion required", ConsoleColor.Red);
                    valid = false;
                }

                if (config.MinorVersion == ushort.MaxValue)
                {
                    Program.PrintColorMessage($"{configName} - MinorVersion required", ConsoleColor.Red);
                    valid = false;
                }

                if (config.BuildNumberMax < config.BuildNumberMin)
                {
                    Program.PrintColorMessage($"{configName} - BuildNumber range is invalid", ConsoleColor.Red);
                    valid = false;
                }

                if (config.BuildNumberMax == config.BuildNumberMin &&
                    config.RevisionMax < config.RevisionMin)
                {
                    Program.PrintColorMessage($"{configName} - Revision range is invalid", ConsoleColor.Red);
                    valid = false;
                }
            }

            return valid;
        }

        private static unsafe string BufferToString(byte[] Buffer)
        {
            using (MemoryStream stream = new MemoryStream(Buffer, false))
            {
                StringBuilder hex = new StringBuilder(64);
                StringBuilder sb = new StringBuilder(8192);
                Span<byte> bytes = stackalloc byte[8];

                while (true)
                {
                    int length = stream.Read(bytes);

                    if (length == 0)
                        break;

                    for (int i = 0; i < length; i++)
                    {
                        hex.Append($"0x{bytes[i]:x2}, ");
                    }
                    hex.Remove(hex.Length - 1, 1);

                    sb.Append("    ");
                    sb.AppendLine(hex.ToString());
                    hex.Clear();

                    if (length < bytes.Length)
                        break;
                }

                return sb.ToString();
            }
        }

        private static string BytesToString(byte[] Buffer)
        {
            using (MemoryStream stream = new MemoryStream(Buffer, false))
            {
                StringBuilder hex = new StringBuilder(64);
                StringBuilder sb = new StringBuilder(8192);
                Span<byte> bytes = stackalloc byte[8];

                while (true)
                {
                    var len = stream.Read(bytes);

                    if (len == 0)
                    {
                        break;
                    }

                    for (int i = 0; i < len; i++)
                    {
                        hex.AppendFormat("0x{0:x2}, ", bytes[i]);
                    }
                    hex.Remove(hex.Length - 1, 1);

                    sb.Append("    ");
                    sb.AppendLine(hex.ToString());
                    hex.Clear();

                    if (len < bytes.Length)
                    {
                        break;
                    }
                }

                return sb.ToString();
            }
        }
    }
}
