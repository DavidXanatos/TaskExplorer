/*
 * Copyright (c) 2022 Winsider Seminars & Solutions, Inc.  All rights reserved.
 *
 * This file is part of System Informer.
 *
 * Authors:
 *
 *     jxy-s
 *
 */

namespace CustomBuildTool
{
    public static class DynData
    {
        private const string FileHeader =
@"/*
 * Copyright (c) 2022 Winsider Seminars & Solutions, Inc.  All rights reserved.
 *
 * This file is part of System Informer.
 *
 * THIS IS AN AUTOGENERATED FILE, DO NOT MODIFY
 *
 */";

        private const string Includes =
@"#include <kphlibbase.h>";

        private const UInt32 Version = 10;

        private static string DynConfigC =
$@"#define KPH_DYN_CONFIGURATION_VERSION { Version }

#define KPH_DYN_CI_INVALID ((SHORT)-1)
#define KPH_DYN_CI_V1      ((SHORT)1)
#define KPH_DYN_CI_V2      ((SHORT)2)

#define KPH_DYN_LX_INVALID ((SHORT)-1)
#define KPH_DYN_LX_V1      ((SHORT)1)

#include <pshpack1.h>

typedef struct _KPH_DYN_CONFIGURATION
{{
    USHORT MajorVersion;
    USHORT MinorVersion;
    USHORT BuildNumberMin;               // -1 to ignore
    USHORT RevisionMin;                  // -1 to ignore
    USHORT BuildNumberMax;               // -1 to ignore
    USHORT RevisionMax;                  // -1 to ignore

    USHORT EgeGuid;                      // dt nt!_ETW_GUID_ENTRY Guid
    USHORT EpObjectTable;                // dt nt!_EPROCESS ObjectTable
    USHORT EreGuidEntry;                 // dt nt!_ETW_REG_ENTRY GuidEntry
    USHORT HtHandleContentionEvent;      // dt nt!_HANDLE_TABLE HandleContentionEvent
    USHORT OtName;                       // dt nt!_OBJECT_TYPE Name
    USHORT OtIndex;                      // dt nt!_OBJECT_TYPE Index
    USHORT ObDecodeShift;                // dt nt!_HANDLE_TABLE_ENTRY ObjectPointerBits
    USHORT ObAttributesShift;            // dt nt!_HANDLE_TABLE_ENTRY Attributes
    USHORT CiVersion;                    // ci.dll exports version
    USHORT AlpcCommunicationInfo;        // dt nt!_ALPC_PORT CommunicationInfo
    USHORT AlpcOwnerProcess;             // dt nt!_ALPC_PORT OwnerProcess
    USHORT AlpcConnectionPort;           // dt nt!_ALPC_COMMUNICATION_INFO ConnectionPort
    USHORT AlpcServerCommunicationPort;  // dt nt!_ALPC_COMMUNICATION_INFO ServerCommunicationPort
    USHORT AlpcClientCommunicationPort;  // dt nt!_ALPC_COMMUNICATION_INFO ClientCommunicationPort
    USHORT AlpcHandleTable;              // dt nt!_ALPC_COMMUNICATION_INFO HandleTable
    USHORT AlpcHandleTableLock;          // dt nt!_ALPC_HANDLE_TABLE Lock
    USHORT AlpcAttributes;               // dt nt!_ALPC_PORT PortAttributes
    USHORT AlpcAttributesFlags;          // dt nt!_ALPC_PORT_ATTRIBUTES Flags
    USHORT AlpcPortContext;              // dt nt!_ALPC_PORT PortContext
    USHORT AlpcPortObjectLock;           // dt nt!_ALPC_PORT PortObjectLock
    USHORT AlpcSequenceNo;               // dt nt!_ALPC_PORT SequenceNo
    USHORT AlpcState;                    // dt nt!_ALPC_PORT u1.State
    USHORT KtReadOperationCount;         // dt nt!_KTHREAD ReadOperationCount
    USHORT KtWriteOperationCount;        // dt nt!_KTHREAD WriteOperationCount
    USHORT KtOtherOperationCount;        // dt nt!_KTHREAD OtherOperationCount
    USHORT KtReadTransferCount;          // dt nt!_KTHREAD ReadTransferCount
    USHORT KtWriteTransferCount;         // dt nt!_KTHREAD WriteTransferCount
    USHORT KtOtherTransferCount;         // dt nt!_KTHREAD OtherTransferCount
    USHORT LxVersion;                    // lxcore.sys exports version
    USHORT LxPicoProc;                   // uf lxcore!LxpSyscall_GETPID
    USHORT LxPicoProcInfo;               // uf lxcore!LxpSyscall_GETPID
    USHORT LxPicoProcInfoPID;            // uf lxcore!LxpSyscall_GETPID
    USHORT LxPicoThrdInfo;               // uf lxcore!LxpSyscall_GETTID
    USHORT LxPicoThrdInfoTID;            // uf lxcore!LxpSyscall_GETTID
    USHORT MmSectionControlArea;         // dt nt!_SECTION u1.ControlArea
    USHORT MmControlAreaListHead;        // dt nt!_CONTROL_AREA ListHead
    USHORT MmControlAreaLock;            // dt nt!_CONTROL_AREA ControlAreaLock

}} KPH_DYN_CONFIGURATION, *PKPH_DYN_CONFIGURATION;

typedef struct _KPH_DYNDATA
{{
    ULONG Version;
    ULONG Count;
    KPH_DYN_CONFIGURATION Configs[ANYSIZE_ARRAY];

}} KPH_DYNDATA, *PKPH_DYNDATA;

#include <poppack.h>";

        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public struct DynConfig
        {
            public UInt16 MajorVersion;
            public UInt16 MinorVersion;
            public UInt16 BuildNumberMin;
            public UInt16 RevisionMin;
            public UInt16 BuildNumberMax;
            public UInt16 RevisionMax;

            public UInt16 EgeGuid;
            public UInt16 EpObjectTable;
            public UInt16 EreGuidEntry;
            public UInt16 HtHandleContentionEvent;
            public UInt16 OtName;
            public UInt16 OtIndex;
            public UInt16 ObDecodeShift;
            public UInt16 ObAttributesShift;
            public UInt16 CiVersion;
            public UInt16 AlpcCommunicationInfo;
            public UInt16 AlpcOwnerProcess;
            public UInt16 AlpcConnectionPort;
            public UInt16 AlpcServerCommunicationPort;
            public UInt16 AlpcClientCommunicationPort;
            public UInt16 AlpcHandleTable;
            public UInt16 AlpcHandleTableLock;
            public UInt16 AlpcAttributes;
            public UInt16 AlpcAttributesFlags;
            public UInt16 AlpcPortContext;
            public UInt16 AlpcPortObjectLock;
            public UInt16 AlpcSequenceNo;
            public UInt16 AlpcState;
            public UInt16 KtReadOperationCount;
            public UInt16 KtWriteOperationCount;
            public UInt16 KtOtherOperationCount;
            public UInt16 KtReadTransferCount;
            public UInt16 KtWriteTransferCount;
            public UInt16 KtOtherTransferCount;
            public UInt16 LxVersion;
            public UInt16 LxPicoProc;
            public UInt16 LxPicoProcInfo;
            public UInt16 LxPicoProcInfoPID;
            public UInt16 LxPicoThrdInfo;
            public UInt16 LxPicoThrdInfoTID;
            public UInt16 MmSectionControlArea;
            public UInt16 MmControlAreaListHead;
            public UInt16 MmControlAreaLock;

            public DynConfig()
            {
                MajorVersion = ushort.MaxValue;
                MinorVersion = ushort.MaxValue;
                BuildNumberMin = ushort.MaxValue;
                BuildNumberMax = ushort.MaxValue;
                RevisionMin = ushort.MaxValue;
                RevisionMax = ushort.MaxValue;

                EgeGuid = ushort.MaxValue;
                EpObjectTable = ushort.MaxValue;
                EreGuidEntry = ushort.MaxValue;
                HtHandleContentionEvent = ushort.MaxValue;
                OtName = ushort.MaxValue;
                OtIndex = ushort.MaxValue;
                ObDecodeShift = ushort.MaxValue;
                ObAttributesShift = ushort.MaxValue;
                CiVersion = ushort.MaxValue;
                AlpcCommunicationInfo = ushort.MaxValue;
                AlpcOwnerProcess = ushort.MaxValue;
                AlpcConnectionPort = ushort.MaxValue;
                AlpcServerCommunicationPort = ushort.MaxValue;
                AlpcClientCommunicationPort = ushort.MaxValue;
                AlpcHandleTable = ushort.MaxValue;
                AlpcHandleTableLock = ushort.MaxValue;
                AlpcAttributes = ushort.MaxValue;
                AlpcAttributesFlags = ushort.MaxValue;
                AlpcPortContext = ushort.MaxValue;
                AlpcPortObjectLock = ushort.MaxValue;
                AlpcSequenceNo = ushort.MaxValue;
                AlpcState = ushort.MaxValue;
                KtReadOperationCount = ushort.MaxValue;
                KtWriteOperationCount = ushort.MaxValue;
                KtOtherOperationCount = ushort.MaxValue;
                KtReadTransferCount = ushort.MaxValue;
                KtWriteTransferCount = ushort.MaxValue;
                KtOtherTransferCount = ushort.MaxValue;
                LxVersion = ushort.MaxValue;
                LxPicoProc = ushort.MaxValue;
                LxPicoProcInfo = ushort.MaxValue;
                LxPicoProcInfoPID = ushort.MaxValue;
                LxPicoThrdInfo = ushort.MaxValue;
                LxPicoThrdInfoTID = ushort.MaxValue;
                MmSectionControlArea = ushort.MaxValue;
                MmControlAreaListHead = ushort.MaxValue;
                MmControlAreaLock = ushort.MaxValue;
            }
        }

        public static void Execute()
        {
            string manifestFile = "kphlib\\kphdyn.xml";
            string headerFile = "kphlib\\include\\kphdyn.h";
            string sourceFile = "kphlib\\kphdyn.c";

            LoadConfig(manifestFile, out string config, out string sig);

            string header = GenerateHeader();
            string source = GenerateSource(config, sig);

            File.WriteAllText(headerFile, header);
            File.WriteAllText(sourceFile, source);
        }

        private static string GenerateHeader()
        {
            StringBuilder sb = new StringBuilder(8192);

            sb.AppendLine(FileHeader);
            sb.AppendLine();
            sb.AppendLine("#pragma once");
            sb.AppendLine();
            sb.AppendLine(Includes);
            sb.AppendLine();
            sb.AppendLine(DynConfigC);
            sb.AppendLine();
            sb.AppendLine("#ifdef _WIN64");
            sb.AppendLine("extern CONST BYTE KphDynData[];");
            sb.AppendLine("extern CONST ULONG KphDynDataLength;");
            sb.AppendLine("extern CONST BYTE KphDynDataSig[];");
            sb.AppendLine("extern CONST ULONG KphDynDataSigLength;");
            sb.AppendLine("#endif");

            return sb.ToString();
        }

        private static string GenerateSource(
            string Config,
            string Sig
            )
        {
            StringBuilder sb = new StringBuilder(16348);

            sb.AppendLine(FileHeader);
            sb.AppendLine();
            sb.AppendLine(Includes);
            sb.AppendLine();
            sb.AppendLine("#ifdef _WIN64");
            sb.AppendLine("CONST BYTE KphDynData[] =");
            sb.AppendLine("{");
            sb.Append(Config);
            sb.AppendLine("};");
            sb.AppendLine();
            sb.AppendLine("CONST ULONG KphDynDataLength = ARRAYSIZE(KphDynData);");
            sb.AppendLine();
            sb.AppendLine("CONST BYTE KphDynDataSig[] =");
            sb.AppendLine("{");
            sb.Append(Sig);
            sb.AppendLine("};");
            sb.AppendLine();
            sb.AppendLine("CONST ULONG KphDynDataSigLength = ARRAYSIZE(KphDynDataSig);");
            sb.AppendLine("#endif");

            return sb.ToString();
        }

        private static void LoadConfig(
            string ManifestFile,
            out string ConfigData,
            out string SigData
            )
        {
            var xml = new XmlDocument();
            xml.Load(ManifestFile);
            var dyn = xml.SelectSingleNode("/dyn");
            var configs = new List<DynConfig>(10);
            var configNames = new List<string>(10);

            foreach (XmlNode data in dyn.SelectNodes("data"))
            {
                var config = new DynConfig();
                var configName = data.Attributes.GetNamedItem("name").Value;

                Program.PrintColorMessage(configName, ConsoleColor.Cyan);

                foreach (XmlNode field in data.SelectNodes("field"))
                {
                    var value = field.Attributes.GetNamedItem("value").Value;
                    var name = field.Attributes.GetNamedItem("name").Value;
                    var member = typeof(DynConfig).GetField(name);

                    if (value.StartsWith("0x", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Convert.ToUInt64(value, 16).ToString();
                    }
                    else if (value.Equals("-1", StringComparison.OrdinalIgnoreCase) && member.FieldType == typeof(ushort))
                    {
                        value = ushort.MaxValue.ToString();
                    }

                    member.SetValueDirect(__makeref(config), Convert.ChangeType(value, member.FieldType));
                }

                configs.Add(config);
                configNames.Add(configName);
            }

            if (!Validate(configs, configNames))
            {
                throw new Exception("Dynamic configuration is invalid!");
            }

            string tempName = $"{Build.BuildWorkingFolder}\\tools\\CustomBuildTool\\bin\\Release\\" + Guid.NewGuid();
            string configFile = $"{tempName}.bin";
            string sigFile = $"{tempName}.sig";

            using (var file = new FileStream(configFile, FileMode.CreateNew))
            using (var writer = new BinaryWriter(file))
            {
                //
                // Write the version and count first, then the blocks.
                // This conforms with KPH_DYNDATA defined above.
                //
                writer.Write(Version);
                writer.Write((uint)configs.Count);
                writer.Write(MemoryMarshal.AsBytes(CollectionsMarshal.AsSpan(configs)));
            }

            if (Verify.CreateSignatureFile(Verify.GetPath("kph.key"), configFile))
            {
                ConfigData = BytesToString(configFile);
                SigData = BytesToString(sigFile);

                Win32.DeleteFile(configFile);
                Win32.DeleteFile(sigFile);
            }
            else
            {
                ConfigData = string.Empty;
                SigData = string.Empty;
            }
        }

        private static bool Validate(List<DynConfig> Configs, List<string> ConfigNames)
        {
            bool valid = true;

            for (int i = 0; i < Configs.Count; i++)
            {
                var config = Configs[i];
                var configName = ConfigNames[i];

                if (config.MajorVersion == ushort.MaxValue)
                {
                    Program.PrintColorMessage($"{configName} - MajorVersion required", ConsoleColor.Red);
                    valid = false;
                }

                if (config.MinorVersion == ushort.MaxValue)
                {
                    Program.PrintColorMessage($"{configName} - MinorVersion required", ConsoleColor.Red);
                    valid = false;
                }

                if (config.BuildNumberMax < config.BuildNumberMin)
                {
                    Program.PrintColorMessage($"{configName} - BuildNumber range is invalid", ConsoleColor.Red);
                    valid = false;
                }

                if (config.BuildNumberMax == config.BuildNumberMin &&
                    config.RevisionMax < config.RevisionMin)
                {
                    Program.PrintColorMessage($"{configName} - Revision range is invalid", ConsoleColor.Red);
                    valid = false;
                }
            }

            return valid;
        }

        private static string BytesToString(string Path)
        {
            var file = File.ReadAllBytes(Path);

            using (MemoryStream stream = new MemoryStream(file, false))
            {
                StringBuilder hex = new StringBuilder(64);
                StringBuilder sb = new StringBuilder(8192);
                Span<byte> bytes = stackalloc byte[8];

                while (true)
                {
                    var len = stream.Read(bytes);

                    if (len == 0)
                    {
                        break;
                    }

                    for (int i = 0; i < len; i++)
                    {
                        hex.AppendFormat("0x{0:x2}, ", bytes[i]);
                    }
                    hex.Remove(hex.Length - 1, 1);

                    sb.Append("    ");
                    sb.AppendLine(hex.ToString());
                    hex.Clear();

                    if (len < bytes.Length)
                    {
                        break;
                    }
                }

                return sb.ToString();
            }
        }
    }
}
